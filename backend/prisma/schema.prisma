
datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

//Needed for client generation

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id
  name          String
  email         String 
  currentRoomId String?
  emailVerified Boolean   @default(false)
  rankedPoints  Int       @default(3000)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  stats         PlayerStats?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Game {
  id              String   @id @default(cuid())
  roomId          String   @unique
  lang            String
  status          String
  playerIds       String[]
  players         Json
  undrawnLetters  Json
  emptyLetterIds  Json
  board           Json
  history         Json
  winnerId        String?
  endReason       String
  endingPlayerId    String?
  pointDiffAppliedToRanked Boolean?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

   @@map("game")
   @@index([playerIds], type: Gin)
}

model PlayerStats {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Win/Loss Records
  totalGames Int @default(0)
  wins       Int @default(0)
  losses     Int @default(0)
  ties       Int @default(0)
  
  // Scoring Stats
  totalPoints      Int @default(0)  // Sum of all game points
  totalWords       Int @default(0)  // Total words played across all games
  totalPointsDiff   Int @default(0)  // Sum of pointsDiffs
  
  // Streaks
  currentStreak     Int    @default(0)
  currentStreakType String @default("none") // "win", "loss", or "none"
  longestWinStreak  Int    @default(0)
  longestLossStreak Int    @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("player_stats")
}